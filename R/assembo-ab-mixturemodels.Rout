
R version 3.4.1 (2017-06-30) -- "Single Candle"
Copyright (C) 2017 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin15.6.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> #-----------------------------
> # assembo-ab-mixturemodels.R
> #
> # Determine seropositivity
> # using gaussian mixture models
> #-----------------------------
> 
> 
> #-----------------------------
> # preamble
> #-----------------------------
> rm(list=ls())
> library(tidyverse)
Loading tidyverse: ggplot2
Loading tidyverse: tibble
Loading tidyverse: tidyr
Loading tidyverse: readr
Loading tidyverse: purrr
Loading tidyverse: dplyr
Conflicts with tidy packages ---------------------------------------------------
filter(): dplyr, stats
lag():    dplyr, stats
> library(mixtools)
mixtools package, version 1.1.0, Released 2017-03-10
This package is based upon work supported by the National Science Foundation under Grant No. SES-0518772.

> 
> # set up for parallel computing
> # configure for a laptop (use only 3 cores)
> library(foreach)

Attaching package: ‘foreach’

The following objects are masked from ‘package:purrr’:

    accumulate, when

> library(doParallel)
Loading required package: iterators
Loading required package: parallel
Warning message:
package ‘doParallel’ was built under R version 3.4.2 
> registerDoParallel(cores=3)
> 
> 
> #-----------------------------
> # load the data
> #-----------------------------
> 
> d <- readRDS("~/dropbox/assembo/data/final/assembo_sero.rds")
> 
> mbavars <- c("vsp3","vsp5","cp17","cp23","leca","rotavirus","p18","p39","etec","cholera")
> mbalabs <- c("Giardia VSP-3","Giardia VSP-5","Cryptosporidium Cp17","Cryptosporidium Cp23",
+              "E. histolytica LecA","Rotavirus","Campylobacter p18","Campylobacter p39","ETEC toxin beta subunit","Cholera toxin beta subunit")
> 
> #-----------------------------
> # restrict to measurements <= 12 months old
> #-----------------------------
> # d <- d %>%
> #   filter(age<=12)
> 
> #-----------------------------
> # reshape long and convert
> # to log10 values
> #-----------------------------
> dl <- d %>%
+   select(childid,time,sex,age,tr,mbavars) %>%
+   gather(antigen,mfi,-childid,-time,-sex,-age,-tr)
> 
> # set negative and zero values to 1 before the log10 transform
> dl <- dl %>%
+   mutate(mfi = ifelse(mfi<=0,1,mfi),
+          log10mfi = log10(mfi),
+          antigen=factor(antigen,levels=mbavars)
+   )
>          
> #-----------------------------
> # mixture models
> #-----------------------------
> fitmix <- function(x,lambda,k) {
+   mixfit <- normalmixEM(x,lambda=lambda,k=k)
+   mixcut <- mixfit$mu[order(mixfit$mu)][1]+3*mixfit$sigma[order(mixfit$mu)][1]
+   cat(summary(mixfit),"\nCutoff value:",mixcut,"(log10 MFI), or:", round(10^mixcut),"(MFI)\n\n")
+   # pull out fitted densities
+   denmat <- matrix(NA,nrow=length(x),ncol=k)
+   for(i in 1:k) {
+     denmat[,i] <- mixfit$lambda[i] * dnorm(x,mean=mixfit$mu[i],sd=mixfit$sigma[i])
+   }
+   denmat <- data.frame(denmat)
+   colnames(denmat) <- paste("den",1:k,sep="")
+   # return original values plus fitted densities in a dataframe 
+   # also return the cutoff value and normalmixEM object
+   xden <- data.frame(x=x,denmat)
+   list(xden=xden,mixcut=mixcut,mixfit=mixfit)
+   
+ }
> 
> ## mixture model fits -- store densities of mixture distributions
> mixdens <- foreach(ab=mbavars,.combine=rbind) %dopar% {
+   mixf <- fitmix(x=dl$log10mfi[dl$antigen==ab],lambda=0.5,k=2)
+   di <- mixf$xden
+   di$antigen=ab
+   di <- di %>% arrange(x)
+   di
+ }
number of iterations= 33 
summary of normalmixEM object:
         comp 1   comp 2
lambda 0.750190 0.249810
mu     0.778483 3.576070
sigma  0.346600 0.796049
loglik at estimate:  -491.9993 
 
Cutoff value: 1.818283 (log10 MFI), or: 66 (MFI)

number of iterations= 39 
summary of normalmixEM object:
         comp 1   comp 2
lambda 0.722503 0.277497
mu     0.707761 3.408624
sigma  0.303598 0.882467
loglik at estimate:  -480.4285 
 
Cutoff value: 1.618555 (log10 MFI), or: 42 (MFI)

number of iterations= 42 
summary of normalmixEM object:
         comp 1    comp 2
lambda 0.902660 0.0973404
mu     1.135886 2.1522877
sigma  0.252314 0.9075963
loglik at estimate:  -154.0261 
 
Cutoff value: 1.892828 (log10 MFI), or: 78 (MFI)

number of iterations= 107 
summary of normalmixEM object:
         comp 1   comp 2
lambda 0.622480 0.377520
mu     1.352002 3.520468
sigma  0.407841 0.750301
loglik at estimate:  -590.1734 
 
Cutoff value: 2.575526 (log10 MFI), or: 376 (MFI)

number of iterations= 50 
summary of normalmixEM object:
         comp 1   comp 2
lambda 0.858102 0.141898
mu     3.881837 1.386778
sigma  0.489028 0.409374
loglik at estimate:  -479.5837 
 
Cutoff value: 2.614898 (log10 MFI), or: 412 (MFI)

number of iterations= 84 
summary of normalmixEM object:
         comp 1   comp 2
lambda 0.477092 0.522908
mu     1.878253 3.458657
sigma  0.272796 0.758892
loglik at estimate:  -525.7482 
 
Cutoff value: 2.69664 (log10 MFI), or: 497 (MFI)

number of iterations= 35 
summary of normalmixEM object:
         comp 1    comp 2
lambda 0.392079 0.6079205
mu     3.434427 4.4615924
sigma  0.870187 0.0206085
loglik at estimate:  173.592 
 
Cutoff value: 6.044987 (log10 MFI), or: 1109142 (MFI)

number of iterations= 345 
summary of normalmixEM object:
         comp 1   comp 2
lambda 0.630139 0.369861
mu     1.453533 3.470778
sigma  0.648451 0.650657
loglik at estimate:  -663.4901 
 
Cutoff value: 3.398886 (log10 MFI), or: 2505 (MFI)

number of iterations= 151 
summary of normalmixEM object:
         comp 1   comp 2
lambda 0.306407 0.693593
mu     2.604527 3.881785
sigma  0.849543 0.398117
loglik at estimate:  -470.4287 
 
Cutoff value: 5.153157 (log10 MFI), or: 142284 (MFI)

number of iterations= 19 
summary of normalmixEM object:
         comp 1    comp 2
lambda 0.602567 0.3974329
mu     3.326068 4.4150231
sigma  0.879210 0.0355064
loglik at estimate:  -266.2978 
 
Cutoff value: 5.963699 (log10 MFI), or: 919812 (MFI)

> 
> ## mixture model fits -- store cutoff values
> mixcuts <- foreach(ab=mbavars,.combine=rbind) %do% {
+   mixf <- fitmix(x=dl$log10mfi[dl$antigen==ab],lambda=0.5,k=2)
+   di <- data.frame(antigen=ab,mixcut=mixf$mixcut)
+   di
+ }
number of iterations= 25 
summary of normalmixEM object:
         comp 1   comp 2
lambda 0.277496 0.722504
mu     3.408626 0.707762
sigma  0.882465 0.303598
loglik at estimate:  -480.4285 
 
Cutoff value: 1.618556 (log10 MFI), or: 42 (MFI)

number of iterations= 27 
summary of normalmixEM object:
        comp 1   comp 2
lambda 0.24981 0.750190
mu     3.57607 0.778483
sigma  0.79605 0.346600
loglik at estimate:  -491.9993 
 
Cutoff value: 1.818283 (log10 MFI), or: 66 (MFI)

number of iterations= 100 
summary of normalmixEM object:
         comp 1   comp 2
lambda 0.622480 0.377520
mu     1.352001 3.520467
sigma  0.407841 0.750302
loglik at estimate:  -590.1734 
 
Cutoff value: 2.575525 (log10 MFI), or: 376 (MFI)

number of iterations= 220 
summary of normalmixEM object:
         comp 1   comp 2
lambda 0.630138 0.369862
mu     1.453532 3.470777
sigma  0.648451 0.650658
loglik at estimate:  -663.4901 
 
Cutoff value: 3.398884 (log10 MFI), or: 2505 (MFI)

number of iterations= 37 
summary of normalmixEM object:
         comp 1    comp 2
lambda 0.902660 0.0973404
mu     1.135886 2.1522870
sigma  0.252314 0.9075963
loglik at estimate:  -154.0261 
 
Cutoff value: 1.892828 (log10 MFI), or: 78 (MFI)

number of iterations= 99 
summary of normalmixEM object:
         comp 1   comp 2
lambda 0.477067 0.522933
mu     1.878235 3.458595
sigma  0.272779 0.758927
loglik at estimate:  -525.7482 
 
Cutoff value: 2.69657 (log10 MFI), or: 497 (MFI)

number of iterations= 163 
summary of normalmixEM object:
         comp 1   comp 2
lambda 0.306356 0.693644
mu     2.604384 3.881751
sigma  0.849525 0.398141
loglik at estimate:  -470.4287 
 
Cutoff value: 5.152959 (log10 MFI), or: 142220 (MFI)

number of iterations= 36 
summary of normalmixEM object:
         comp 1   comp 2
lambda 0.858102 0.141898
mu     3.881837 1.386778
sigma  0.489028 0.409374
loglik at estimate:  -479.5837 
 
Cutoff value: 2.614898 (log10 MFI), or: 412 (MFI)

number of iterations= 39 
summary of normalmixEM object:
         comp 1    comp 2
lambda 0.392080 0.6079204
mu     3.434428 4.4615924
sigma  0.870187 0.0206085
loglik at estimate:  173.592 
 
Cutoff value: 6.044988 (log10 MFI), or: 1109143 (MFI)

number of iterations= 25 
summary of normalmixEM object:
         comp 1    comp 2
lambda 0.602567 0.3974329
mu     3.326068 4.4150231
sigma  0.879210 0.0355064
loglik at estimate:  -266.2978 
 
Cutoff value: 5.963699 (log10 MFI), or: 919812 (MFI)

> 
> # Distributions for p18,ETEC and Cholera do not allow for reasonable mixture cutoffs
> mixcuts$mixcut[mixcuts$antigen %in% c("p18","etec","cholera")] <- NA
> 
> #-----------------------------
> # merge in the mixture cutoffs
> #-----------------------------
> dl <- left_join(dl,mixcuts,by=c("antigen"))
> 
> #-----------------------------
> # add cutoff values for
> # those with an ROC cutoff
> #-----------------------------
> dl <- dl %>%
+   mutate(roccut = NA)
> dl$roccut[dl$antigen %in% "vsp3"] <- log10(542)
> dl$roccut[dl$antigen %in% "vsp5"] <- log10(421)
> dl$roccut[dl$antigen %in% "cp17"] <- log10(375)
> dl$roccut[dl$antigen %in% "cp23"] <- log10(1336)
> 
> #-----------------------------
> # save the results for later
> # use in calculating seroprevalence
> # and seroincidence
> #-----------------------------
> save.image(file="~/dropbox/assembo/results/raw/assembo-ab-mixturemodels.RData")
> 
> #-----------------------------
> # group antigens by pathogen
> # for plot aesthetics
> # label antigens with fancier names
> #-----------------------------
> 
> dplot <- dl
> 
> dplot$pathogen <- NA
> dplot$pathogen[dplot$antigen %in% c("vsp3","vsp5")] <- "Giardia"
> dplot$pathogen[dplot$antigen %in% c("cp17","cp23")] <- "Cryptosporidium"
> dplot$pathogen[dplot$antigen %in% c("leca")] <- "E. histolytica"
> dplot$pathogen[dplot$antigen %in% c("rotavirus")] <- "Rotavirus"
> dplot$pathogen[dplot$antigen %in% c("p18","p39")] <- "Campylobacter"
> dplot$pathogen[dplot$antigen %in% c("etec")] <- "ETEC"
> dplot$pathogen[dplot$antigen %in% c("cholera")] <- "V. cholerae"
> dplot <- dplot %>%
+   mutate(pathogen = factor(pathogen,levels=c("Giardia","Cryptosporidium","E. histolytica","Rotavirus","Campylobacter","ETEC","V. cholerae")),
+          antigen=factor(antigen,levels=mbavars,labels=mbalabs))
> 
> 
> # for the mixture distributions, set p18, ETEC, cholera to missing
> plotmixdens <- mixdens %>%
+   mutate(den1p = ifelse(antigen %in% c("p18","etec","cholera"),NA,den1),
+          den2p = ifelse(antigen %in% c("p18","etec","cholera"),NA,den2)
+          ) %>%
+   mutate(antigen=factor(antigen,levels=mbavars,labels=mbalabs),
+          pathogen="Giardia"
+          )
> 
> #-----------------------------
> # plot distributions
> #-----------------------------
> 
> # bright color blind palette:  https://personal.sron.nl/~pault/ 
> cblack <- "#000004FF"
> cblue <- "#3366AA"
> cteal <- "#11AA99"
> cgreen <- "#66AA55"
> cchartr <- "#CCCC55"
> cmagent <- "#992288"
> cred <- "#EE3333"
> corange <- "#EEA722"
> cyellow <- "#FFEE33"
> cgrey <- "#777777"
> 
> pcols <- c(cred,corange,cchartr,cgreen,cteal,cblue,cmagent)
> 
> # group=antigen,color=antigen,fill=antigen
> p <- ggplot(data=dplot,aes(x=log10mfi,group=pathogen,color=pathogen,fill=pathogen)) +
+   facet_wrap(~antigen,nrow=5,ncol=2,scales="free_y") +
+   # plot empirical distribution and smooth
+   geom_histogram(aes(y=..density..),bins=50,alpha=0.7) +
+   geom_density(aes(fill=NULL),color="black") +
+   # plot fitted mixture distributions
+   geom_line(data=plotmixdens,aes(x=x,y=den1p),color=cgrey) +
+   geom_line(data=plotmixdens,aes(x=x,y=den2p),color=cgrey) +
+   # add vertical lines for the cutoff
+   geom_vline(aes(xintercept=roccut)) +
+   geom_vline(aes(xintercept=mixcut),linetype=2) +
+   # labels and formatting
+   scale_x_continuous(limits = c(0,4.5),breaks = 0:4,labels=0:4) +
+   coord_cartesian(ylim=c(0,2)) +
+   labs(x="Log10 Luminex Response (MFI-bg)") +
+   scale_fill_manual(values=pcols) +
+   scale_color_manual(values=pcols) +
+   theme_minimal() +
+   theme(legend.position = "none")
> 
> p
Warning messages:
1: Removed 890 rows containing missing values (geom_path). 
2: Removed 890 rows containing missing values (geom_path). 
3: Removed 2670 rows containing missing values (geom_vline). 
4: Removed 1335 rows containing missing values (geom_vline). 
> 
> ggsave("~/dropbox/assembo/results/figs/assembo-ab-mixture-distributions.pdf",plot=p,device="pdf",width=7,height=14)
Warning messages:
1: Removed 890 rows containing missing values (geom_path). 
2: Removed 890 rows containing missing values (geom_path). 
3: Removed 2670 rows containing missing values (geom_vline). 
4: Removed 1335 rows containing missing values (geom_vline). 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> proc.time()
   user  system elapsed 
  5.904   0.295   6.289 
